#!/bin/bash
##################### FIRST LINE #####################################

##################### VARS ###########################################
gsCurrentVersion="v1.3"
MySB_InstallDir="/opt/SBT"
# Colors
CEND="\033[0m"
CRED="\033[1;31m"
CGREEN="\033[1;32m"
CYELLOW="\033[1;33m"
CBLUE="\033[1;34m"
# PATH
PATH="/usr/sbin:/sbin:/usr/bin:/bin:/usr/local/bin:/usr/local/sbin"
soxexport PATH

# Force language select
case "${1}" in
    fr | en) EnvLang="${1}" ;;
    *)
        echo
        echo -e "${CBLUE}Please, start $0 with language argument.${CEND}"
        echo
        echo -e "${CYELLOW}Français:${CEND} ${CBLUE}$0${CEND} ${CGREEN}fr${CEND}"
        echo -e "${CYELLOW}English:${CEND} ${CBLUE}$0${CEND} ${CGREEN}en${CEND}"
        echo
        exit 0
        ;;
esac

##################### FUNCTIONS ######################################

# English mesages
LoadEnglish() {
    AnswerYES="YES"
    AnswerNO="NO"
    OnlyForDebian="
${CRED}MySB ${gsCurrentVersion} script is designed only for Debian 10 (Buster).
Systems with a kernel PVE is no longer supported.
A default Debian kernel is also required.
A valid Internet access is required.
You must be logged in as ROOT.

Aborting !${CEND}"

    RebootBeforeInstall="${CBLUE}You need to reboot your server before install MySB.
After the reboot, you can start again '$0'.${CEND}

${CYELLOW}Do you want to reboot now ? (yes/no)${CEND}"

    MessageIsReady="${CYELLOW}All is ok to start MySB installation.
The following actions will be performed.
	1) Updating sources (verbosely)
	2) Update System (verbosely)
	3) Installation of some mandatory pakages (verbosely)
	4) Simple adaptation of sources (silently)
	5) Creation of databases (silently)
	4) You will have to answer some questions
	5) Installation of MySB (silently)

The installation may take 30 to 60 minutes around.
This will depend on your server configuration and choice of services to install.

Are you ready to install MySB ? (yes/no)${CEND} "

    CustomKernel="${CRED}Your server use a custom kernel (maybe installed by OVH, DigiCube or other).
This kernel does not support networking modules required by Iptables, PeerGuardian and OpenVPN.
If you want install MySB, you must install a Debian standard kernel.${CEND}

${CYELLOW}You have 2 options:
	You have 2 options:
		- Either we try to install a standard Debian kernel (not guaranteed outcome).
		- Either you do a fresh install of your server using the OVH Manager interface as follows:
			1) When choosing the OS, check \"Custom install\"
			2) Then on the options page (hostname, SSH key), check \"Use of kernel distribution\"
			3) Continue and confirm the installation of your system
			4) From there you can proceed with installing MySB${CEND}

${CBLUE}Type${CEND} ${CGREEN}YES${CEND} ${CBLUE}for try to install a standard Debian kernel.${CEND}
${CBLUE}Type${CEND} ${CGREEN}NO${CEND} ${CBLUE}for stop the script now and proceed to an new install yourself.${CEND}

${CBLUE}What do you want to do ? (yes/no)${CEND}"

    BannerAdvertising="${CRED}############################################################${CEND}
${CRED}#${CEND} ${CYELLOW}At the end of the installation, you will receive an email.${CEND}
${CRED}#${CEND} ${CYELLOW}It list informations about your account.${CEND}
${CRED}# IMPORTANT:${CEND} ${CYELLOW}Remember to also to check the SPAM folder of your mail account...${CEND}
${CRED}############################################################${CEND}"

    KernelManualInstall="${CRED}I can't find the last kernel for your server, please install it yourself.${CEND}"
    LatestKernel="${CYELLOW}Latest Debian kernel	: ${CEND}"
    LetsGo="${CYELLOW}OK, let's go !${CEND}"
    SeeYouLater="${CYELLOW}OK, see you later...${CEND}"
    WhereToInstall="${CBLUE}Where do you want to install MySB ? (Hit enter for default choice) [${MySB_InstallDir}]${CEND}"
    UpdatingSource="${CBLUE}Updating Debian source lists${CEND}... "
    SomethingWrong="${CRED}Looks like something was wrong during the update, aborting !${CEND}"
    NeededPackage="${CBLUE}Installing some needed packages${CEND}... "
    PurgeBind="${CBLUE}Deleting Bind9${CEND}... "
    DirNotEmpty="${CYELLOW}The selected folder [${MySB_InstallDir}] is not empty, choose another one:${CEND}"
    DownloadingGithub="${CBLUE}Downloading files from GitHub into [${MySB_InstallDir}]${CEND}"
    Done="${CGREEN}Done !${CEND}"
    CreatingDir="${CBLUE}Creating directories${CEND}..."
    CreatingMySQL_DB="${CBLUE}Creating MySQL databases${CEND}..."
    StartingScreen="${CBLUE}Starting SCREEN session...${CEND}"
    PleaseWait="${CRED}Please wait ${CEND}"
    AlreadyExecuted="${CRED}MySB is already started with SCREEN, aborting !${CEND}"
    AlreadyInstalled="${CRED}MySB is already installed, aborting!${CEND}"
    ToUpgradeUse="${CBLUE}To upgrade MySB, thank you to use the following command.${CEND}"

    DoDebianUpgrade=("${CBLUE}You need to update Debian to version 10 (Buster) before you can install MySB.

We can start the update to Debian 10 now.
At the end of the update, your server will restart. You will need to restart the installation of MySB yourself.

Do you want to start the update to Debian 10 now? (yes/no)${CEND}")
    DoDebianUpgradeNoRoot=("${CRED}You must be logged in as a ROOT to upgrade from Debian !${CEND}")
}

# French mesages
LoadFrench() {
    AnswerYES="OUI"
    AnswerNO="NON"
    OnlyForDebian="
${CRED}MySB ${gsCurrentVersion} est conçu uniquement pour Debian 10 (Buster).
Les systèmes avec un noyau PVE ne sont pas supportés.
Un noyau Debian standard est également nécessaire.
Un accès Internet valide est requis.
Vous devez être connecté en tant que ROOT.

Abandon !${CEND}"

    RebootBeforeInstall="${CBLUE}Vous devez redémarrer votre serveur avant d'installer MySB.
Après le redémarrage, vous pourrez exécuter '$0' à nouveau.${CEND}

${CYELLOW}Voulez-vous redémarrer maintenant ? (oui/non)${CEND}"

    MessageIsReady="${CYELLOW}Tout est OK pour démarrer l'installation de MySB.
Les actions suivantes vont être exécutées.
	1) Mise à jour rapide des sources (verbeusement)
	2) Mise à jour du système (verbeusement)
	3) Installation de quelques paquets obligatoires (verbeusement)
	4) Adaptation simple des sources (en silence)
	5) Création des bases de données (en silence)
	6) Vous devrez répondre à quelques questions
	7) Installation de MySB (en silence)

L'installation peut prendre de 30 à 60 minutes environ.
Cela dépendra de la configuration de votre serveur et du choix des services à installer.

Êtes-vous prêt à installer MySB ? (oui/non)${CEND} "

    CustomKernel="${CRED}Votre serveur utilise un noyau personnalisé (peut-être installé par OVH, DigiCube ou autre).
Ce noyau ne supporte pas les modules requis par IPtables, OpenVPN et PeerGuardian.
Si vous voulez installer MySB, vous devez installer un noyau Debian standard.${CEND}

${CYELLOW}Vous avez 2 possibilités:
		- Soit nous essayons d'installer un noyau Debian standard (résultat non garanti).
		- Soit vous faites une nouvelle installation de votre serveur en utilisant l'interface du gestionnaire OVH comme suit:
			1) Lors du choix du système d'exploitation, consultez \"Installation personnalisée\"
			2) Ensuite, sur la page des options (nom d'hôte, clé SSH), vérifiez \"Utilisez le noyau de la distribution\"
			3) Continuez et confirmez l'installation de votre système
			4) De là, vous pouvez procéder à l'installation de MySB${CEND}

${CBLUE}Tapez${CEND} ${CGREEN}OUI${CEND} ${CBLUE}pour essayer d'installer un noyau Debian standard.${CEND}
${CBLUE}Tapez${CEND} ${CGREEN}NON${CEND} ${CBLUE}pour arrêter le script maintenant et procéder à une nouvelle installation d'un kernel vous-même.${CEND}

${CBLUE}Que voulez-vous faire? (oui/non)${CEND}"

    BannerAdvertising="${CRED}############################################################${CEND}
${CRED}#${CEND} ${CYELLOW}A la fin de l'installation, vous recevrez un e-mail.${CEND}
${CRED}#${CEND} ${CYELLOW}Il listera les informations sur votre compte.${CEND}
${CRED}# IMPORTANT:${CEND} ${CYELLOW}Pensez à vérifier également le dossier SPAM de votre compte de messagerie...${CEND}
${CRED}############################################################${CEND}"

    KernelManualInstall="${CRED}Je ne peux pas trouver le dernier noyau pour votre serveur, merci d'installer vous-même un noyau standard.${CEND}"
    LatestKernel="${CYELLOW}Dernier noyau debian	: ${CEND}"
    LetsGo="${CYELLOW}OK, c'est parti !${CEND}"
    SeeYouLater="${CYELLOW}OK, à plus tard ...${CEND}"
    WhereToInstall="${CBLUE}Où voulez-vous installer MySB ? (Appuyez sur Entrée pour le choix par défaut) [${MySB_InstallDir}]${CEND}"
    UpdatingSource="${CBLUE}Mise à jour des listes sources de Debian${CEND}... "
    SomethingWrong="${CRED}On dirait que quelque chose clochait au cours de la mise à jour, abandon!${CEND}"
    NeededPackage="${CBLUE}Installation des paquets nécessaires${CEND}... "
    PurgeBind="${CBLUE}Suppression de Bind9${CEND}... "
    DirNotEmpty="${CYELLOW}Le dossier sélectionné [${MySB_InstallDir}] n'est pas vide, choisissez en un autre:${CEND}"
    DownloadingGithub="${CBLUE}Téléchargement des fichiers provenant de GitHub dans [${MySB_InstallDir}]${CEND}"
    Done="${CGREEN}Fait !${CEND}"
    CreatingDir="${CBLUE}Création des répertoires${CEND}..."
    CreatingMySQL_DB="${CBLUE}Création des bases de données MySQL${CEND}..."
    StartingScreen="${CBLUE}Démarrage de la session SCREEN...${CEND}"
    PleaseWait="${CRED}Merci de patienter ${CEND}"
    AlreadyExecuted="${CRED}L'installation de MySB est déjà exécutée avec SCREEN, abandon !${CEND}"
    AlreadyInstalled="${CRED}MySB est déjà installé, abandon!${CEND}"
    ToUpgradeUse="${CBLUE}Pour mettre à jour MySB, merci d'utiliser la commande suivante.${CEND}"

    DoDebianUpgrade=("${CBLUE}Vous devez mettre à jour Debian en version 10 (Buster) avant de pouvoir installer MySB.

Nous pouvons lancer la mise à jour vers Debian 10 maintenant.
A la fin de la mise à jour, votre serveur redémarrera. Vous devrez alors relancer l'installation de MySB vous-même.

Voulez-vous lancer la mise à jour vers Debian 10 maintenant ? (oui/non)${CEND}")
    DoDebianUpgradeNoRoot=("${CRED}Vous devez être connecté en tant que ROOT pour procéder à la mise à niveau de Debian !${CEND}")
}

# Espanish mesages
LoadEspanish() {
    AnswerYES="SI"
    AnswerNO="NO"
    OnlyForDebian="
${CRED}MySB ${gsCurrentVersion} está diseñado solo para Debian 10 (Buster).
Esta es una version DEV para soportar Ubuntu.
Los sistemas con kernel PVE ya no son compatibles.
Es necesario disponer de un kernel estandar para Ubuntu o Debian.
Acceso a internet.
Y acceso ROOT al sistema.

Cancelando !${CEND}"

    RebootBeforeInstall="${CBLUE}Necesita reiniciar su servidor antes de instalar MySB.
Después del reinicio, puede comenzar de nuevo '$0'.${CEND}

${CYELLOW}¿Quieres reiniciar ahora?  (si/no)${CEND}"

    MessageIsReady="${CYELLOW}Todo está bien para iniciar la instalación de MySB.
Se realizarán las siguientes acciones.
	1) Actualización de fuentes (detallado)
	2) Actualización del sistema (detallado)
	3) Installation of some mandatory pakages (verbosely)
	4) Simple adaptation of sources (silently)
	5) Creation of databases (silently)
	4) You will have to answer some questions
	5) Installation of MySB (silently)

The installation may take 30 to 60 minutes around.
This will depend on your server configuration and choice of services to install.

Are you ready to install MySB ? (yes/no)${CEND} "

    CustomKernel="${CRED}Your server use a custom kernel (maybe installed by OVH, DigiCube or other).
This kernel does not support networking modules required by Iptables, PeerGuardian and OpenVPN.
If you want install MySB, you must install a Debian standard kernel.${CEND}

${CYELLOW}You have 2 options:
	You have 2 options:
		- Either we try to install a standard Debian kernel (not guaranteed outcome).
		- Either you do a fresh install of your server using the OVH Manager interface as follows:
			1) When choosing the OS, check \"Custom install\"
			2) Then on the options page (hostname, SSH key), check \"Use of kernel distribution\"
			3) Continue and confirm the installation of your system
			4) From there you can proceed with installing MySB${CEND}

${CBLUE}Type${CEND} ${CGREEN}YES${CEND} ${CBLUE}for try to install a standard Debian kernel.${CEND}
${CBLUE}Type${CEND} ${CGREEN}NO${CEND} ${CBLUE}for stop the script now and proceed to an new install yourself.${CEND}

${CBLUE}What do you want to do ? (yes/no)${CEND}"

    BannerAdvertising="${CRED}############################################################${CEND}
${CRED}#${CEND} ${CYELLOW}At the end of the installation, you will receive an email.${CEND}
${CRED}#${CEND} ${CYELLOW}It list informations about your account.${CEND}
${CRED}# IMPORTANT:${CEND} ${CYELLOW}Remember to also to check the SPAM folder of your mail account...${CEND}
${CRED}############################################################${CEND}"

    KernelManualInstall="${CRED}I can't find the last kernel for your server, please install it yourself.${CEND}"
    LatestKernel="${CYELLOW}Latest Debian kernel	: ${CEND}"
    LetsGo="${CYELLOW}OK, let's go !${CEND}"
    SeeYouLater="${CYELLOW}OK, see you later...${CEND}"
    WhereToInstall="${CBLUE}Where do you want to install MySB ? (Hit enter for default choice) [${MySB_InstallDir}]${CEND}"
    UpdatingSource="${CBLUE}Updating Debian source lists${CEND}... "
    SomethingWrong="${CRED}Looks like something was wrong during the update, aborting !${CEND}"
    NeededPackage="${CBLUE}Installing some needed packages${CEND}... "
    PurgeBind="${CBLUE}Deleting Bind9${CEND}... "
    DirNotEmpty="${CYELLOW}The selected folder [${MySB_InstallDir}] is not empty, choose another one:${CEND}"
    DownloadingGithub="${CBLUE}Downloading files from GitHub into [${MySB_InstallDir}]${CEND}"
    Done="${CGREEN}Done !${CEND}"
    CreatingDir="${CBLUE}Creating directories${CEND}..."
    CreatingMySQL_DB="${CBLUE}Creating MySQL databases${CEND}..."
    StartingScreen="${CBLUE}Starting SCREEN session...${CEND}"
    PleaseWait="${CRED}Please wait ${CEND}"
    AlreadyExecuted="${CRED}MySB is already started with SCREEN, aborting !${CEND}"
    AlreadyInstalled="${CRED}MySB is already installed, aborting!${CEND}"
    ToUpgradeUse="${CBLUE}To upgrade MySB, thank you to use the following command.${CEND}"

    DoDebianUpgrade=("${CBLUE}You need to update Debian to version 10 (Buster) before you can install MySB.

We can start the update to Debian 10 now.
At the end of the update, your server will restart. You will need to restart the installation of MySB yourself.

Do you want to start the update to Debian 10 now? (yes/no)${CEND}")
    DoDebianUpgradeNoRoot=("${CRED}You must be logged in as a ROOT to upgrade from Debian !${CEND}")
}


# To execute when this script will exited
ExitOnError() {
    # shellcheck source=inc/includes_after
    if [ -f ${MySB_InstallDir}/inc/includes_after ]; then source "${MySB_InstallDir}"/inc/includes_after; fi
    case "$1" in
        0)
            echo -e "$2"
            continue
            ;;
        *)
            echo -e "$SomethingWrong"
            echo -e "$2"
            continue
            ;;
    esac
}

# Kernel replace ?
KernelReplace() {
    local KernelFind Answer
    KernelFind="$(apt-cache search linux-image | grep -v 'rt-\|dummy\|dbg\|bpo\|grsec\|cloud\|image' | awk '{ print $1 }' | grep '[.]' | head -n 1)"

    echo
    if [ -n "${KernelFind}" ]; then
        echo -e "$LatestKernel${CGREEN}${KernelFind}${CEND}"
        echo
        # Purge actual kernel
        apt-get -y --assume-yes purge "linux-image-$(uname -r)"
        update-grub
        # Install needed keernel
        apt-get -y --assume-yes -o 'Acquire::Check-Valid-Until=false' update
        apt-get -y --assume-yes -V -o Dpkg::Options::="--force-confold" upgrade
        apt-get -y --assume-yes install "${KernelFind}"
        if [ -f /etc/grub.d/06_OVHkernel ]; then
            mv /etc/grub.d/06_OVHkernel /etc/grub.d/99_OVHkernel
        fi
        update-grub

        echo
        echo -e -n "$RebootBeforeInstall"

        read -r Answer
        case ${Answer:0:1} in
            y | Y | yes | YES | o | O | oui | OUI | s | S | si | SI)
                echo -e "${LetsGo}"
                fnCountDown 3
                systemctl reboot
                ExitOnError 0
                ;;
            n | N | no | NO | non | NON)
                nContinue=1
                ;;
        esac
    else
        echo -e "$LatestKernel${CRED}${CEND}"
        echo -e "$KernelManualInstall"
        nContinue=1
    fi
}

# Banner
BannerInstall() {
    #### Banner
    clear
    echo -e "${CGREEN}############################################################${CEND}"
    echo -e "${CGREEN}#${CEND}"
    echo -e "${CGREEN}#${CEND} 			${CYELLOW}MySB${CEND} ${CRED}${gsCurrentVersion}${CEND}"
    echo -e "${CGREEN}#${CEND}"
    echo -e "${CGREEN}############################################################${CEND}"
    echo

    #### Advertising
    echo -e "$BannerAdvertising"
    echo
}

# Count down...
fnCountDown() {
    for ((i = $1; i >= 0; i -= 1)); do
        echo -n " $i"
        sleep 1
    done
    echo
}

SystemChecks() {
    local nContinue nDebianUpgrade sOS_Id sOS_Ver sOS_Arch sPVE_Kernel sOVH_Kernel sFlex_Kernel sAnswer sLVM sDocUrl
    nContinue=0
    nDebianUpgrade=0
    sDocUrl="https://app.gitbook.com/@mysb/s/doc/installation/pre-requis"

    #### Doc
    echo -e "${CYELLOW}Prerequisites	: ${CEND}${CBLUE}${sDocUrl}${CEND}"

    #### Must be Debian 10 Buster or Ubuntu 22
    if type -P lsb_release >/dev/null; then
        sOS_Id="$(lsb_release -is)"
        sOS_Ver="$(lsb_release -rs | cut -d '.' -f 1)"
    else
        if [ -f /etc/lsb-release ]; then
            sOS_Id="$(grep 'DISTRIB_ID' /etc/lsb-release | cut -d '=' -f 2)"
            sOS_Ver="$(grep 'DISTRIB_RELEASE' /etc/issue.net | cut -d '=' -f 2)"
        elif [ -f /etc/issue.net ]; then
            sOS_Id="$(awk '{ print $1 }' </etc/issue.net | sed -e 's/^$//g;')"
            sOS_Ver="$(awk '{ print $3 }' </etc/issue.net | sed -e 's/^$//g;')"
        fi
    fi
    sOS_Arch="$(dpkg --print-architecture)"
    sPVE_Kernel="$(uname -r | grep 'pve')"
    sOVH_Kernel="$(uname -r | grep 'xxxx')"
    sFlex_Kernel="$(uname -a | grep 'Ubuntu')"
    echo -e "${CYELLOW}Architecture	: ${CEND}${CGREEN}${sOS_Arch}${CEND}"
    if [ "${sOS_Id}" != "Debian" ]; then
        if [ -f /etc/debian_version ]; then
            echo -e "${CYELLOW}Distributor ID	: ${CEND}${CGREEN}${sOS_Id}${CEND}"
            sOS_Ver="$(cut -d '.' -f 1 </etc/debian_version)"
        else
            echo -e "${CYELLOW}Distributor ID	: ${CEND}${CRED}${sOS_Id}${CEND}"
            
        fi
    else
        echo -e "${CYELLOW}Distributor ID	: ${CEND}${CGREEN}${sOS_Id}${CEND}"
    fi
    case "${sOS_Ver}" in
        10 | 11) echo -e "${CYELLOW}Release		: ${CEND}${CGREEN}${sOS_Ver}${CEND}" ;;
        *)
            echo -e "${CYELLOW}Release		: ${CEND}${CRED}${sOS_Ver}${CEND}"
            nDebianUpgrade=1
            ;;
    esac

    #### Check kernel if is a PVE kernel
    if [ -n "${sPVE_Kernel}" ]; then
        nContinue=1
        echo -e "${CYELLOW}PVE kernel	: ${CEND}${CRED}${AnswerYES}${CEND}"
    else
        echo -e "${CYELLOW}PVE kernel	: ${CEND}${CGREEN}${AnswerNO}${CEND}"
    fi

    #### Must be root
    if [[ ${EUID} -ne 0 ]]; then
        nContinue=1
        nDebianUpgrade=0
        echo -e "${CYELLOW}Root		: ${CEND}${CRED}${AnswerNO}${CEND}"
    else
        echo -e "${CYELLOW}Root		: ${CEND}${CGREEN}${AnswerYES}${CEND}"
    fi

    #### Check internet access
    if (! ping -c3 github.com >>/tmp/"$(basename "$0")".log); then
        nContinue=1
        echo -e "${CYELLOW}Internet	: ${CEND}${CRED}${AnswerNO}${CEND}"
    else
        echo -e "${CYELLOW}Internet	: ${CEND}${CGREEN}${AnswerYES}${CEND}"
    fi

    #### Check kernel if is an Ubuntu kernel (DigiCube)
    if [ -n "${sFlex_Kernel}" ]; then
        
        echo -e "${CYELLOW}Ubuntu kernel	: ${CEND}${CRED}${AnswerYES}${CEND}"
    else
        echo -e "${CYELLOW}Ubuntu kernel	: ${CEND}${CGREEN}${AnswerNO}${CEND}"
    fi

    #### Check filesystem type (must be ext4)
    if [ "$(df -T "/home/" | awk '{print $2}' | tail -n1)" != "ext4" ] && [ ! -f /.dockerenv ]; then
        nContinue=1
        echo -e "${CYELLOW}Filesystem	: ${CEND}${CRED}${AnswerYES}${CEND}"
    else
        echo -e "${CYELLOW}Filesystem	: ${CEND}${CGREEN}${AnswerNO}${CEND}"
    fi

    #### Check LVM
    if (! dpkg -s lvdisplay &>/dev/null); then
        echo -e "${CYELLOW}LVM	        : ${CEND}${CGREEN}${AnswerNO}${CEND}"
    else
        sLVM="$(lvdisplay)"
        if [ -z "${sLVM}" ]; then
            echo -e "${CYELLOW}LVM	        : ${CEND}${CGREEN}${AnswerNO}${CEND}"
        else
            nContinue=1
            echo -e "${CYELLOW}LVM	        : ${CEND}${CRED}${AnswerYES}${CEND}"
        fi
    fi

    #### Check kernel if is an OVH kernel, replace the kernel if needed
    if [ -n "${sOVH_Kernel}" ]; then
        echo -e "${CYELLOW}OVH kernel	: ${CEND}${CRED}${AnswerYES}${CEND}"
    else
        echo -e "${CYELLOW}OVH kernel	: ${CEND}${CGREEN}${AnswerNO}${CEND}"
    fi
    if [ -n "${sOVH_Kernel}" ]; then
        sAnswer=""
        while [ -z "${sAnswer}" ]; do
            clear
            echo -e -n "${CustomKernel}"
            read -r sAnswer
            case ${sAnswer:0:1} in
                y | Y | yes | YES | o | O | oui | OUI | s | S | si | SI)
                    echo -e "${LetsGo}"
                    fnCountDown 3
                    KernelReplace
                    ;;
                n | N | no | NO | non | NON)
                    nContinue=1
                    ;;
                *) unset sAnswer ;;
            esac
        done
    fi

    if [[ ${nContinue} -gt 0 ]]; then
        case "${sOS_Ver}" in
            9)
                if [[ ${nDebianUpgrade} -gt 0 ]]; then
                    echo
                    echo -e "${DoDebianUpgrade[*]}"
                    read -r sAnswer
                    case ${sAnswer:0:1} in
                        y | Y | yes | YES | o | O | oui | OUI | s | S | si | SI)
                            echo -e "${LetsGo}"
                            fnCountDown 3
                            cd /tmp/ || exit 1
                            wget --no-check-certificate -N https://raw.githubusercontent.com/toulousain79/MySB/"${gsCurrentVersion}"/upgrade/Debian_Upgrade.bsh "${EnvLang}"
                            bash /tmp/Debian_Upgrade.bsh
                            ;;
                        n | N | no | NO | non | NON)
                            ExitOnError 1 "${OnlyForDebian}"
                            ;;
                        *) unset sAnswer ;;
                    esac
                else
                    echo -e "${OnlyForDebian}"
                    ExitOnError 1 "${DoDebianUpgradeNoRoot[*]}"
                fi
                ;;
            *) ExitOnError 1 "${OnlyForDebian}" ;;
        esac
    fi
}

##################### INIT ###########################################

# Start Log
clear
{
    echo "------------------------------------------------------------"
    echo "START Err: $(/bin/date '+%Y-%m-%d - %H:%M:%S') - $(basename "$0")"
    echo "------------------------------------------------------------"
} >/tmp/"$(basename "$0")".log
exec 2>>/tmp/"$(basename "$0")".log

# Language select
if [ -z "${EnvLang}" ]; then
    EnvLang="${LANG:0:2}"
fi
case "${EnvLang}" in
    en) LoadEnglish ;;
    fr) LoadFrench ;;
    *)
        EnvLang="en"
        EnvLang="en"
        ;;
esac

# Banner
[ ! -f /.dockerenv ] && BannerInstall

# Some verifications
SystemChecks

# Check if ths script is already running with screen
if type -P screen >/dev/null; then
    if (screen -ls | grep -q 'MySB' 2>/dev/null); then
        ExitOnError 1 "${AlreadyExecuted}"
    fi
fi


# Force locales
# https://www.debian.org/doc/manuals/fr/debian-fr-howto/ch3.html
if (type -P /usr/sbin/dpkg-reconfigure >/dev/null); then
    case "${EnvLang}" in
        "fr") gsLocale="fr_FR" ;;
        "en") gsLocale="en_US" ;;
    esac
    [ -z "${gsLocale}" ] && gsLocale="en_US"
    sed -i "s/# ${gsLocale}.UTF-8 UTF-8/${gsLocale}.UTF-8 UTF-8/g;" /etc/locale.gen
    export LANG=${gsLocale}.UTF-8
    export LANGUAGE=${LANG:0:2}
    {
        /usr/sbin/update-locale "LANG=${gsLocale}.UTF-8"
        /usr/sbin/update-locale "LANGUAGE=${LANG:0:2}"
        /usr/sbin/locale-gen "${gsLocale}.UTF-8"
        /usr/sbin/dpkg-reconfigure -f noninteractive locales
        cat /etc/default/locale
    } >>/tmp/"$(basename "$0")".log
    # SSH - AcceptEnv
    sed -i "s/^AcceptEnv/#AcceptEnv/g;" /etc/ssh/sshd_config
    # SSH - SendEnv
    nNumLine=$(grep 'SendEnv ' -n -m 1 /etc/ssh/ssh_config | cut -d ':' -f 1)
    sed -i '/SendEnv /d' /etc/ssh/ssh_config
    sed -i "${nNumLine}i\#   SendEnv LANG LC_*" /etc/ssh/ssh_config
    systemctl reload sshd.service
fi

# Force public DNS (#66)
gaDnsList=(84.200.69.80 84.200.70.40 1.1.1.1 1.0.0.1)
sed -i '/nameserver/d' /etc/resolv.conf
{
    for sDNS in "${gaDnsList[@]}"; do
        echo "nameserver ${sDNS}"
    done
} >>/etc/resolv.conf

# We do an update
if [ ! -f /.dockerenv ]; then
    BannerInstall
    echo -e -n "${UpdatingSource}"
    fnCountDown 3
fi
if (! apt-get -y --assume-yes -o 'Acquire::Check-Valid-Until=false' update); then
    ExitOnError 1 "apt-get -y --assume-yes -o 'Acquire::Check-Valid-Until=false' update"
fi

# Now we can install required packages
if [ ! -f /.dockerenv ]; then
    BannerInstall
    echo -e -n "${NeededPackage}"
    fnCountDown 3
fi
TOOLS=(git-core lsb-release screen ccze gnupg figlet net-tools dnsutils curl geoip-bin systemd procps pwgen) # DO NO RENAME 'TOOLS' VARIABLES !
if (! apt-get -y --assume-yes install "${TOOLS[@]}"); then
    ExitOnError 1 "apt-get -y --assume-yes install ${TOOLS[*]}"
else
    [ ! -f /.dockerenv ] && echo -e "${Done}"
fi

# First we disable IPv6
sysctl -w net.ipv6.conf.all.disable_ipv6=1 >>/tmp/"$(basename "$0")".log



# /etc/MySB/config
mkdir -p /etc/MySB/
{
    echo "MySB_InstallDir=\"${MySB_InstallDir}\""
    echo "MySB_Files=\"${MySB_InstallDir}_files\""
    echo "EnvLang=\"${EnvLang}\""
    echo "export MySB_InstallDir MySB_Files EnvLang"
} >/etc/MySB/config
chmod 0600 /etc/MySB/config

# load variables
# shellcheck source=inc/vars
source "${MySB_InstallDir}"/inc/vars

# Create directories
echo -e -n "${CreatingDir}"
gfnManageDirAndFiles 'global'
echo -e "${Done}"

#### Create databases
if [ ! -f /.dockerenv ]; then
    echo -e -n "${CreatingMySQL_DB}"
    gfnScriptInvoke 'ScreenWAIT' "${MySB_InstallDir}/install/MySQL" 'INSTALL'
    gfnStatusSTD
else
    bash "${MySB_InstallDir}/install/MySQL" 'INSTALL'
fi

# Update DB with usable values
if (! cmdMySQL 'MySB_db' "UPDATE system SET mysb_version='${gsCurrentVersion}' WHERE id_system='1';" -v >>/tmp/"$(basename "$0")".log); then
    ExitOnError 1 "UPDATE system SET mysb_version='${gsCurrentVersion}' WHERE id_system='1';"
fi
if (! cmdMySQL 'MySB_db' "INSERT INTO users (users_ident,users_email,language,admin) VALUES ('MySB','MySB','${EnvLang}','1');" -v >>/tmp/"$(basename "$0")".log); then
    ExitOnError 1 "INSERT INTO users (users_ident,users_email,language,admin) VALUES ('MySB','MySB','${EnvLang}','1');"
fi
# shellcheck source=inc/vars
source "${MySB_InstallDir}"/inc/vars

# Some questions

#### Project check
if [ -f /.dockerenv ]; then
    gsMainUserName="test"
    gsMainUserPassword="test"
    gsSmtpProvider="LOCAL"
    gsServerProvider="${Global_None}"
    bToInstall=1

    cmdMySQL 'MySB_db' "UPDATE services SET to_install='${bToInstall}', used='1' WHERE serv_name='Seedbox-Manager';" -v
    cmdMySQL 'MySB_db' "UPDATE repositories SET active='${bToInstall}' WHERE name='Seedbox-Manager' OR name='ruTorrent Plugin Link Manager';" -v
    cmdMySQL 'MySB_db' "UPDATE services SET to_install='${bToInstall}', used='1' WHERE serv_name='CakeBox-Light';" -v
    cmdMySQL 'MySB_db' "UPDATE repositories SET active='${bToInstall}' WHERE name='CakeBox-Light' OR name='ruTorrent Plugin Link Cakebox';" -v
    cmdMySQL 'MySB_db' "UPDATE services SET to_install='${bToInstall}', used='1' WHERE serv_name='Plex Media Server';" -v
    cmdMySQL 'MySB_db' "UPDATE services SET to_install='${bToInstall}', used='1' WHERE serv_name='NextCloud';" -v
    cmdMySQL 'MySB_db' "UPDATE repositories SET active='${bToInstall}' WHERE name='NextCloud';" -v
    cmdMySQL 'MySB_db' "UPDATE services SET to_install='${bToInstall}', used='1', port_tcp1='${gsPorts_Webmin}' WHERE serv_name='Webmin';" -v
    cmdMySQL 'MySB_db' "UPDATE services SET to_install='${bToInstall}', used='1', $sTcpPortsList, $sUdpPortsList WHERE serv_name='OpenVPN';" -v
    cmdMySQL 'MySB_db' "UPDATE services SET to_install='${bToInstall}', used='1' WHERE serv_name='Samba' OR serv_name='NFS';" -v
    cmdMySQL 'MySB_db' "UPDATE services SET to_install='1', used='1' WHERE serv_name='LogWatch';" -v
    cmdMySQL 'MySB_db' "UPDATE services SET to_install='${bToInstall}', used='1' WHERE serv_name='Fail2Ban';" -v
    cmdMySQL 'MySB_db' "UPDATE services SET to_install='1', used='1' WHERE serv_name='DNScrypt-proxy';" -v
    cmdMySQL 'MySB_db' "UPDATE repositories SET active='1' WHERE name='DNScrypt-proxy' OR name='Libsodium' OR name='Minisign';" -v
    cmdMySQL 'MySB_db' "UPDATE services SET to_install='1', used='1' WHERE serv_name='PeerGuardian';" -v
    cmdMySQL 'MySB_db' "UPDATE services SET to_install='0', used='1' WHERE serv_name='rTorrent Block List';" -v
    nFreeSpace=$(gfnQuotaSpaceAvailable)
    cmdMySQL 'MySB_db' "UPDATE system SET mysb_version='$(cat "${MySB_InstallDir}"/version)', hostname='${gsHostNameFqdn}', ipv4='${gsSrvIpAddress}', ipv4_ext='${gsSrvIpAddressExt}', ipv4_additional='${gsSrvAdditionnalIpAddresses}' , primary_inet='${gsPrimaryInet}', timezone='${gsTimeZone}', server_provider='${gsServerProvider}', ip_restriction='0', quota_default='${nFreeSpace}' WHERE id_system='1';" -v
    cmdMySQL 'MySB_db' "UPDATE services SET port_tcp1='${gsPort_MySB_HTTPS}' WHERE serv_name='NginX';" -v
    cmdMySQL 'MySB_db' "UPDATE services SET port_tcp1='${gsPort_SSH}', port_tcp2='', port_tcp3='', ports_tcp_list='', port_udp1='', port_udp2='', port_udp3='', ports_udp_list='' WHERE serv_name='SSH';" -v
    cmdMySQL 'MySB_db' "UPDATE services SET port_tcp1='${gsPort_FTP}', port_tcp2='${gsPort_FTP_Data}', port_tcp3='65000:65535', port_udp1='', port_udp2='', port_udp3='', ports_udp_list='' WHERE serv_name='VSFTPd';" -v
    cmdMySQL 'MySB_db' "UPDATE smtp SET smtp_provider='${gsSmtpProvider}', smtp_username='${SMTP_Username}', smtp_passwd='${SMTP_Password}', smtp_email='${gsMainUserEmail}' WHERE id_smtp='1';" -v
    cmdMySQL 'MySB_db' "UPDATE users SET users_ident='${gsMainUserName}', users_email='${gsMainUserEmail}', sftp='1', sudo='1', admin='1' WHERE users_ident='MySB' OR admin='1';" -v
    cmdMySQL 'MySB_db' "UPDATE users SET users_passwd='${gsMainUserPassword}' WHERE users_ident='MySB' OR admin='1';"
    cmdMySQL 'MySB_db' "UPDATE users_history SET users_ident='${gsMainUserName}' WHERE users_ident='MySB';" -v
    sqlite3 -echo -cmd '.timeout 150000' "${gsWolf_DB}" "UPDATE user SET name='${gsMainUserName}', email='', username='' WHERE id='2';"

    case "${CHECK_METHOD}" in
        'full' | 'install')
            bash "${MySB_InstallDir}"/install/MySB.bsh
            ;;
        'integ')
            bash /bin/bash "${MySB_InstallDir}"/install/Questions 'INSTALL'"${MySB_InstallDir}"/install/Packages 'INSTALL'
            ;;
    esac
else
    /bin/bash "${MySB_InstallDir}"/install/Questions 'INSTALL'
    echo
    echo

    # Start install script
    echo -e "${StartingScreen}"
    screen -wipe >>/tmp/"$(basename "$0")".log
    screen -dmS MySB_bsh /bin/bash "${MySB_InstallDir}"/install/MySB.bsh
    echo -e -n "${PleaseWait}"
    fnCountDown 5
    screen -r MySB_bsh

    #### Engage a reboot after an install
    REBOOT=YES
    export REBOOT
fi

# -----------------------------------------
# shellcheck source=inc/includes_after
if [ -f "${MySB_InstallDir}"/inc/includes_after ]; then source "${MySB_InstallDir}"/inc/includes_after; fi
# -----------------------------------------
##################### LAST LINE ######################################
